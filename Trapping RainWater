/* Given an integer array A of non-negative integers representing an elevation map where the width of each bar is 1,
   compute how much water it is able to trap after raining.

Problem Constraints
1 <= |A| <= 100000

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9   */

//water trapping problem 

import java.util.Scanner;
import java.util.*;
import java.lang.*;
public class Main {
	
       static void water(int ar[]) 
		    { 
    	      int n=ar.length;
		      int res=0;
		      int[] lmax=new int[n];
		      int[] rmax=new int[n];
          
		  // building lmax(left) array    
		      lmax[0]=ar[0];
		       for(int i=1;i<n;i++)
		       {
		    	 lmax[i]=Math.max(ar[i],lmax[i-1]);
		    	  
		       }
           
		  // building rmax(right) array     
		       rmax[n-1]=ar[n-1];
		       for(int i=n-2;i>=0;i--)
		       {
		    	   rmax[i]=Math.max(ar[i],rmax[i+1]);
		       }
		      
		   //main logic
		       for(int i=1;i<n-1;i++)
		       {
		    	   res+=Math.min(lmax[i],rmax[i])-ar[i];
		       }
		        System.out.print("max water storage is of "+res+" units");
		        }
            
            
		    public static void main(String args[]) 
		    {    Scanner sc=new Scanner(System.in);
		        System.out.println("enter number of elements");
		        int n = sc.nextInt(); 
		        System.out.println("enter elements");
		        int ar[]=new int[n];
		        for(int i=0;i<n;i++)
		        {
		        	ar[i]=sc.nextInt();
		        }
		        water(ar);
		    } 
		}

