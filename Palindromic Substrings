/* Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:
Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

Example 2:
Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 
Note:
The input string length won't exceed 1000.

APPROACH:
eg s: abccba
Idea if we have checked for bccb earlier then we just have to check that is character before first b IS equal to character after the last b.
It means that if dp[start+1][end-1]==true && s.charAt(start)==s.charAt(end) then YIPPEE!! its a palindromic substring.
ALSO
if length of string is 1 then its a palindromic .
if length of string is 2 . just check if they are same then its palindromic.

COMPLEXITY:
Time: O(n^2) Space: O(n^2)
*/

import java.util.*;
class Main{
   public static void main( strings[] args){
      Scanner sc=new Scanner(System.in);
      System.out.println("enter string");
      String s=sc.nextLine();
      int count=0;
        boolean[][] dp=new boolean[s.length()][s.length()];
        
        for(int i=0;i<s.length();i++){
            int start=0;
            int end=i;
            while(end<s.length()){
                if(i==0){
                    dp[start][end]=true;
                }else if(i==1){
                    dp[start][end]=s.charAt(start)==s.charAt(end);
                }else{
                   if(s.charAt(start)==s.charAt(end) && dp[start+1][end-1]){
                       dp[start][end]=true;
                   }
                }
                
                if(dp[start][end]) count++;
                start++;
                end++;
            }
              return count;
   }
}
